[tool.poetry]
name = "godly-ai"
version = "0.1.0"
description = "Revolutionary Self-Learning Neuromorphic Intelligence System"
authors = ["Godly AI Development Team <team@godly-ai.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
# Core neuromorphic frameworks
jax = "^0.6.0"
jaxlib = "^0.6.0"
spyx = "^0.1.19"
# Secondary neuromorphic frameworks
# lava-nc = "^0.10.0"  # Commented out due to Python 3.11+ compatibility issues
nengo = "^4.0.0"
spikingjelly = "^0.0.0.0.14"
# Core scientific computing
numpy = "^2.1.0"
scipy = "^1.10.0"
# Storage and data management
redis = "^5.0.0"
h5py = "^3.9.0"
networkx = "^3.1"
# Performance optimization
# numba = "^0.58.0"  # Commented out due to llvmlite build issues on Python 3.13
# Visualization and monitoring
matplotlib = "^3.7.0"
plotly = "^5.15.0"
tensorboard = "^2.13.0"
# wandb = "^0.15.0"  # Commented out due to pathtools dependency issues
# API and web interface
fastapi = "^0.100.0"
uvicorn = "^0.23.0"
# Configuration management
pydantic = "^2.0.0"
pydantic-settings = "^2.0.0"
flax = "^0.11.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.0"
pytest-benchmark = "^4.0.0"
hypothesis = "^6.82.0"
# Code quality
black = "^23.7.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"
# Pre-commit hooks
pre-commit = "^3.3.0"
# Documentation
sphinx = "^7.1.0"
sphinx-rtd-theme = "^1.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmarks",
    "validation: marks tests as validation tests",
    "performance: marks tests as performance tests",
]